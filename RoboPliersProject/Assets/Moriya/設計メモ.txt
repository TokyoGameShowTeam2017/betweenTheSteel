・アームについて
アーム自体は伸びるだけ。
アームの根元が回転する、回転角度の限界まで動く。


・アームとペンチのボーン制御
プログラムで制御orアニメーションをうまいこと利用　のどちらか
プログラムで制御したほうが自由度が高いから後々良い

アームは救急隊員が使うはしご車のはしごみたいな感じ
（筒の中に伸ばすための筒がある）
ペンチはロボットアーム


・カメラについて
状態は2つ
①通常
②イベント

通常時は選択中のアームが、カメラの正面方向に来る
カメラの向きとほぼ同じほうに、アームの矛先を向ける。
アームの根元の角度限界が来たら、それ以降はプレイヤーそのものを回転させて対応。
カメラの回転はアームの根元を基準にするのが、照準がズレにくくていいかも。

また、アームが何かを掴んでいる状態でアームを変更した場合は、変更先にカメラを向ける。



＝設計＝
・インプットではUnityのInputクラスからの入力取得と、その値の調整・補完等を行う。
・アームはプレイヤーの子オブジェクト



インプット（）
{
	上下左右移動方向取得()
	カメラアングル移動方向取得()

	伸ばす入力取得(腕のＩＤ)
	掴む入力取得(腕のＩＤ)
	アームの変更入力取得()
	{
		戻り値は構造体にしようと思う
		(bool,腕のＩＤ)
	}
	アームの回転入力取得()
	{
		Ｌ１とＲ１（-1～1）
	}
	挟む入力取得()
	{
		Ｌ２のトリガーの入力値を取得
	}
	アームの伸び入力取得()
	{
		Ｒ２のトリガーの入力値を取得
	}

}


プレイヤー
{
	serialized
	float 移動速度
	float 重力の強さ
	

	private
	v3 移動方向
	float 下方向移動量

	Update()
	{
		通常移動
		上を押すとカメラの前方向に向かって移動を行う
	}

	通常移動()
	{
		上下左右移動方向取得()
		前後左右に移動する
	}

	掴んだ状態の移動()
	{
		上下左右移動方向取得()
		掴んだ点を軸に回転
	}

	空中移動()
	{
		重力移動
		ジャンプ移動
	}

	重力移動()
	{
		自由落下
		アームの掴む力が弱いと、自由落下よりは遅いながらもずり落ちる（火花も散る）
	}
	ジャンプ()
	{
		重力移動との兼ね合いあり

	}


}

アーム
{
	int 腕のＩＤ
	bool 選んでいるか？（操作しているか？）
	bool 掴んでいるか？
	v3 掴んだ座標

	伸ばす()
	{
		伸ばす入力取得(腕のＩＤ)
		カメラの注視点に向かって伸びる(カメラの方向そのままではなく、操作感がよさそうな感じにする)
	}

	掴む
	{			
		掴む入力取得(腕のＩＤ)
	}

	アームが変更されているかを確認()
	{
		アームの変更入力取得()
			→trueなら変更
	}

	掴んでいるか？()
	つかんだ座標()
}

アームマネージャー
{

	int 選択中のアームのＩＤ

	選択中アームのＩＤ取得()
}


カメラ
{
	カメラ状態
	{
		通常
		イベント
	}

	通常()
	イベント時()

	カメラの正面方向取得()
}

掴めるオブジェクト
{
	オブジェクトパラメーター
	{
		丈夫さ
		曲がりやすさ
		曲がる最大角度（どこかしらのボーン間の角度がこれを超えると折れる）
		重さ（プレイヤーより軽いなら持ち上げ、プレイヤーより重いならプレイヤーが持ち上がる）
		持ち上げられるか？
	}

}












